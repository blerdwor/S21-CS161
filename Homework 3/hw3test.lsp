; These are test cases from the spec as well as some that I've written

; test goal state
(setq gs '((1 1 1 1 1 1)
           (1 0 0 0 0 1)
           (1 0 0 0 0 1)
           (1 1 0 1 1 1)
           (1 0 0 0 0 1)
           (1 0 4 0 4 1)
           (1 1 1 1 1 1)))

(print "(goal-test gs) should ret T")
(print (goal-test gs))

; for testing set-square and get-square
(setq test-square '((1 2 3)
                    (4 5 6)
                    (7 8 9)))

;
; TESTING NEXT_STATES
;

; NIL cases
(setq all-wall '((1 1 1)
                 (1 3 1)
                 (1 1 1)))
(print "(next-states all-wall) should ret NIL")
(print (next-states all-wall))

(setq n1 '((1 2 1)
           (1 2 1)
           (1 3 1)))
(print "(next-states n1) should ret NIL")
(print (next-states n1))

(setq n2 '((1 1 1)
           (3 2 5)
           (1 1 1)))
(print "(next-states n2) should ret NIL")
(print (next-states n2))

(setq n3 '((1 1 2)
           (1 1 5)
           (1 1 3)))
(print "(next-states n3) should ret NIL")
(print (next-states n3))

(setq n4 '((1 3 1)
           (1 2 1)
           (1 1 1)))
(print "(next-states n4) should ret NIL")
(print (next-states n4))

; checking basic cases
(setq a '((0 0 0)
          (0 3 0)
          (0 0 0)))
(print "(next-states a) should ret 4 states")
(print a)
(print (next-states a))

(setq b '((0 0 0)
          (0 0 3)
          (0 0 0)))
(print "(next-states b) should ret 3 states")
(print b)
(print (next-states b))

(setq c '((0 0 3)
          (0 0 0)
          (0 0 0)))
(print "(next-states c) should ret 2 states")
(print c)
(print (next-states c))

(setq d '((0 4 3)
          (0 0 0)
          (0 0 0)))
(print "(next-states d) should ret 2 states with keeper moved to goal")
(print d)
(print (next-states d))

(setq e '((3 2 0)
          (2 0 0)
          (0 0 0)))
(print "(next-states e) should ret 2 states with a box pushed in front of them")
(print e)
(print (next-states e))

(setq f '((0 3 0)
          (0 2 0)
          (0 4 0)))
(print "(next-states f) should ret 3 states with a box pushed onto a goal")
(print f)
(print (next-states f))

(setq g '((0 0 0)
          (0 5 3)
          (0 0 0)))
(print "(next-states g) should ret box not on goal but keeper on goal")
(print g)
(print (next-states g))

(setq h '((0 0 0)
          (4 5 3)
          (0 0 0)))
(print "(next-states h) should ret box and keeper on goals")
(print h)
(print (next-states h))

; exact same stuff as above however the keeper was on a goal to begin with
(print "These test cases should have the old keeper spot as a goal now")

(setq i '((0 0 0)
          (0 6 0)
          (0 0 0)))
(print "(next-states i) should ret 4 states")
(print i)
(print (next-states i))

(setq j '((0 0 0)
          (0 0 6)
          (0 0 0)))
(print "(next-states j) should ret 3 states")
(print j)
(print (next-states j))

(setq k '((0 0 6)
          (0 0 0)
          (0 0 0)))
(print "(next-states k) should ret 2 states")
(print k)
(print (next-states k))

(setq l '((0 4 6)
          (0 0 0)
          (0 0 0)))
(print "(next-states l) should ret 2 states with keeper moved to goal")
(print l)
(print (next-states l))

(setq m '((6 2 0)
          (2 0 0)
          (0 0 0)))
(print "(next-states m) should ret 2 states with a box pushed in front of them")
(print m)
(print (next-states m))

(setq n '((0 6 0)
          (0 2 0)
          (0 4 0)))
(print "(next-states n) should ret 3 states with a box pushed onto a goal")
(print n)
(print (next-states n))

(setq o '((0 0 0)
          (0 5 6)
          (0 0 0)))
(print "(next-states o) should ret box not on goal but keeper on goal")
(print o)
(print (next-states o))

(setq p '((0 0 0)
          (4 5 6)
          (0 0 0)))
(print "(next-states p) should ret box and keeper on goals")
(print p)
(print (next-states p))

; test cases found in the spec
(print "Test cases for next-state in the spec")

(setq s1 '((1 1 1 1 1)
	   (1 4 0 0 1)
	   (1 0 2 0 1)
	   (1 0 3 0 1)
	   (1 0 0 0 1)
	   (1 1 1 1 1)))
(print (next-states s1))
(print (equal (next-states s1)
	      '(((1 1 1 1 1) (1 4 2 0 1) (1 0 3 0 1) (1 0 0 0 1) (1 0 0 0 1) (1 1 1 1 1)) 
		((1 1 1 1 1) (1 4 0 0 1) (1 0 2 0 1) (1 0 0 3 1) (1 0 0 0 1) (1 1 1 1 1)) 
		((1 1 1 1 1) (1 4 0 0 1) (1 0 2 0 1) (1 0 0 0 1) (1 0 3 0 1) (1 1 1 1 1)) 
		((1 1 1 1 1) (1 4 0 0 1) (1 0 2 0 1) (1 3 0 0 1) (1 0 0 0 1) (1 1 1 1 1)))))

(setq s2 '((1 1 1 1 1)
	   (1 0 0 4 1)
	   (1 0 2 3 1)
	   (1 0 0 0 1)
	   (1 0 0 4 1)
	   (1 1 1 1 1)))
(print (next-states s2))
(print (equal (next-states s2)
	      '(((1 1 1 1 1) (1 0 0 6 1) (1 0 2 0 1) (1 0 0 0 1) (1 0 0 4 1) (1 1 1 1 1)) 
		((1 1 1 1 1) (1 0 0 4 1) (1 0 2 0 1) (1 0 0 3 1) (1 0 0 4 1) (1 1 1 1 1)) 
		((1 1 1 1 1) (1 0 0 4 1) (1 2 3 0 1) (1 0 0 0 1) (1 0 0 4 1) (1 1 1 1 1)))))

(setq s3 '((1 1 1 1 1)
	   (1 0 0 6 1)
	   (1 0 2 0 1)
	   (1 0 0 0 1)
	   (1 4 0 4 1)
	   (1 1 1 1 1))) 
(print (next-states s3))
(print (equal (next-states s3)
	      '(((1 1 1 1 1) (1 0 0 4 1) (1 0 2 3 1) (1 0 0 0 1) (1 4 0 4 1) (1 1 1 1 1)) 
	        ((1 1 1 1 1) (1 0 3 4 1) (1 0 2 0 1) (1 0 0 0 1) (1 4 0 4 1) (1 1 1 1 1)))))

(setq s4 '((1 1 1 1 1) 
	   (1 0 2 4 1) 
	   (1 0 0 0 1) 
	   (1 0 0 0 1) 
	   (1 0 5 3 1) 
	   (1 1 1 1 1)))
(print (next-states s4))
(print (equal (next-states s4)
	      '(((1 1 1 1 1) (1 0 2 4 1) (1 0 0 0 1) (1 0 0 3 1) (1 0 5 0 1) (1 1 1 1 1)) 
	        ((1 1 1 1 1) (1 0 2 4 1) (1 0 0 0 1) (1 0 0 0 1) (1 2 6 0 1) (1 1 1 1 1)))))

(sokoban p1 #'h105375663)
(sokoban p2 #'h105375663)
(sokoban p3 #'h105375663)
(sokoban p4 #'h105375663)
(sokoban p5 #'h105375663)
(sokoban p6 #'h105375663)
(sokoban p7 #'h105375663)
(sokoban p8 #'h105375663)
(sokoban p9 #'h105375663)
(sokoban p10 #'h105375663)
(sokoban p11 #'h105375663)
(sokoban p12 #'h105375663)
(sokoban p14 #'h105375663)
